// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: contracts/record.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordServiceClient interface {
	SaveRecord(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (RecordService_ListRecordsClient, error)
}

type recordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordServiceClient(cc grpc.ClientConnInterface) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) SaveRecord(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/RecordService/SaveRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (RecordService_ListRecordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RecordService_ServiceDesc.Streams[0], "/RecordService/ListRecords", opts...)
	if err != nil {
		return nil, err
	}
	x := &recordServiceListRecordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RecordService_ListRecordsClient interface {
	Recv() (*RecordResponse, error)
	grpc.ClientStream
}

type recordServiceListRecordsClient struct {
	grpc.ClientStream
}

func (x *recordServiceListRecordsClient) Recv() (*RecordResponse, error) {
	m := new(RecordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecordServiceServer is the server API for RecordService service.
// All implementations must embed UnimplementedRecordServiceServer
// for forward compatibility
type RecordServiceServer interface {
	SaveRecord(context.Context, *RecordRequest) (*RecordResponse, error)
	ListRecords(*ListRecordsRequest, RecordService_ListRecordsServer) error
	mustEmbedUnimplementedRecordServiceServer()
}

// UnimplementedRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordServiceServer struct {
}

func (UnimplementedRecordServiceServer) SaveRecord(context.Context, *RecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRecord not implemented")
}
func (UnimplementedRecordServiceServer) ListRecords(*ListRecordsRequest, RecordService_ListRecordsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRecords not implemented")
}
func (UnimplementedRecordServiceServer) mustEmbedUnimplementedRecordServiceServer() {}

// UnsafeRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordServiceServer will
// result in compilation errors.
type UnsafeRecordServiceServer interface {
	mustEmbedUnimplementedRecordServiceServer()
}

func RegisterRecordServiceServer(s grpc.ServiceRegistrar, srv RecordServiceServer) {
	s.RegisterService(&RecordService_ServiceDesc, srv)
}

func _RecordService_SaveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).SaveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecordService/SaveRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).SaveRecord(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_ListRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRecordsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordServiceServer).ListRecords(m, &recordServiceListRecordsServer{stream})
}

type RecordService_ListRecordsServer interface {
	Send(*RecordResponse) error
	grpc.ServerStream
}

type recordServiceListRecordsServer struct {
	grpc.ServerStream
}

func (x *recordServiceListRecordsServer) Send(m *RecordResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RecordService_ServiceDesc is the grpc.ServiceDesc for RecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveRecord",
			Handler:    _RecordService_SaveRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRecords",
			Handler:       _RecordService_ListRecords_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contracts/record.proto",
}
